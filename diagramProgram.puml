@startuml
class com.example.program.Controllers.MainController {
+ TableView<Requirements> RequirementsTable
+ TableColumn<Requirements,Integer> id_Requirements
+ TableColumn<Requirements,String> Name_Requirements
+ TableColumn<Requirements,String> PriorityRequirements
+ TableColumn<Requirements,String> VersionRequirements
+ TableColumn<Requirements,String> StatusRequirements
+ TableColumn<Requirements,String> AuthorRequirements
+ ComboBox<String> comboStatus
+ ComboBox<String> comboPriority
+ TextField textName
+ TextField textVersion
+ CheckBox checkAuthor
+ VBox vboxNotForGuest
+ Button btnDelete
~ Users user
~ Requirements requirements
~ RequirementsDAO requirementsDAO
+ void inputUser(Users)
+ void initialize(URL,ResourceBundle)
- void tableView()
+ void clear()
+ void Add()
+ void Delete()
+ void Update()
}
class com.example.program.Controllers.LoginController {
- Label welcomeText
- TextField LoginText
- TextField PasswordText
~ UserDAO userDAO
+ {static} boolean isUserIn
+ void onLogin(ActionEvent)
+ void onShowRegister(ActionEvent)
+ void onGuest(ActionEvent)
}
class com.example.program.Controllers.RegisterController {
~ UserDAO sqLiteDAO
- TextField newLogin
- TextField newPassword
+ void onRegister(ActionEvent)
+ void onShowLogin(ActionEvent)
}
class com.example.program.Model.Requirements {
+ int id_Requirements
+ String priority
+ String Name
+ String Version
+ String status
+ String author
+ int getId_Requirements()
+ void setId_Requirements(int)
+ String getPriority()
+ void setPriority(String)
+ String getName()
+ void setName(String)
+ String getVersion()
+ void setVersion(String)
+ String getStatus()
+ void setStatus(String)
+ String getAuthor()
+ void setAuthor(String)
}
class com.example.program.Model.UserDAO {
+ void createTableUser()
+ void createTableRequirements()
+ List<Entity> getAllEntity()
+ void printAll()
+ boolean Verification(String,String)
+ void addUser(String,String)
+ Entity getDeveloper(int)
+ Users findUser(String,String)
+ Users Mapping(ResultSet)
+ Connection getConnection()
+ boolean execSQL(String)
}
class com.example.program.HelloApplication {
+ void start(Stage)
+ {static} void downloadScene(String,ActionEvent,String)
+ {static} void main(String[])
}
class com.example.program.Model.Users {
~ int id_User
~ String login
~ String password
+ int getId_User()
+ void setId_User(int)
+ String getLogin()
+ void setLogin(String)
+ String getPassword()
+ void setPassword(String)
+ String toString()
}
interface com.example.program.Model.Entity {
+ String toString()
}
abstract class com.example.program.Model.DAO {
~ Connection connection
+ void createConnection()
+ List<Entity> getAllEntity()
+ Entity getDeveloper(int)
+ void updateDeveloper(Entity)
+ void deleteDeveloper(Entity)
}
class com.example.program.Model.RequirementsDAO {
+ ObservableList<Requirements> getRequirements()
+ Requirements MappringRequirements(ResultSet)
+ void addRequirements(String,String,String,String,String)
+ void deleteRequirements(int)
+ void updateRequirements(String,String,String,String,String,int)
}


javafx.fxml.Initializable <|.. com.example.program.Controllers.MainController
com.example.program.Model.Entity <|.. com.example.program.Model.Requirements
com.example.program.Model.DAO <|-- com.example.program.Model.UserDAO
javafx.application.Application <|-- com.example.program.HelloApplication
com.example.program.Model.Entity <|.. com.example.program.Model.Users
com.example.program.Model.DAO <|-- com.example.program.Model.RequirementsDAO
@enduml